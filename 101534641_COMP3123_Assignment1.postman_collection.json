{
	"info": {
		"_postman_id": "0b232ad9-9986-478c-8326-44b7feb00a39",
		"name": "101534641_COMP3123_Assignment1",
		"description": "Complete API test collection for COMP 3123 Assignment 1 - Student #101534641\n\n🔒 All employee endpoints require JWT authentication\n\nTest Order:\n1. Signup (get user_id)\n2. Login (get jwt_token)\n3. Employee operations (use jwt_token automatically)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39296085"
	},
	"item": [
		{
			"name": "User Management",
			"item": [
				{
					"name": "1. Signup - Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql('User created successfully.');",
									"});",
									"",
									"pm.test(\"Response has user_id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user_id');",
									"    pm.collectionVariables.set(\"user_id\", jsonData.user_id);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"johndoe\",\n  \"email\": \"johndoe@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/user/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"signup"
							]
						},
						"description": "Create a new user account. No authentication required."
					},
					"response": []
				},
				{
					"name": "2. Login - Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql('Login successful.');",
									"});",
									"",
									"pm.test(\"Response has JWT token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('jwt_token');",
									"    pm.collectionVariables.set(\"jwt_token\", jsonData.jwt_token);",
									"    console.log(\"✅ JWT Token saved to collection variable\");",
									"});",
									"",
									"pm.test(\"JWT token is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.jwt_token).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"johndoe@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/user/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"login"
							]
						},
						"description": "Login with email and password. Returns JWT token that will be automatically used for all employee requests."
					},
					"response": []
				},
				{
					"name": "Login - With Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has JWT token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('jwt_token');",
									"    pm.collectionVariables.set(\"jwt_token\", jsonData.jwt_token);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"johndoe\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/user/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"login"
							]
						},
						"description": "Alternative login with username"
					},
					"response": []
				}
			],
			"description": "User authentication endpoints"
		},
		{
			"name": "Employee Management (JWT Protected 🔒)",
			"item": [
				{
					"name": "3. Get All Employees 🔒",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"if (pm.response.json().length > 0) {",
									"    pm.test(\"Employee has correct structure\", function () {",
									"        var employee = pm.response.json()[0];",
									"        pm.expect(employee).to.have.property('employee_id');",
									"        pm.expect(employee).to.have.property('first_name');",
									"        pm.expect(employee).to.have.property('email');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/emp/employees",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"emp",
								"employees"
							]
						},
						"description": "🔒 JWT Required: Get all employees"
					},
					"response": []
				},
				{
					"name": "4. Create Employee 🔒",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql('Employee created successfully.');",
									"});",
									"",
									"pm.test(\"Response has employee_id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('employee_id');",
									"    pm.collectionVariables.set(\"employee_id\", jsonData.employee_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Alice\",\n  \"last_name\": \"Johnson\",\n  \"email\": \"alice.johnson@example.com\",\n  \"position\": \"Designer\",\n  \"salary\": 85000,\n  \"date_of_joining\": \"2023-08-10T00:00:00.000Z\",\n  \"department\": \"Design\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/emp/employees",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"emp",
								"employees"
							]
						},
						"description": "🔒 JWT Required: Create a new employee"
					},
					"response": []
				},
				{
					"name": "5. Get Employee by ID 🔒",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has employee details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('employee_id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/emp/employees/{{employee_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"emp",
								"employees",
								"{{employee_id}}"
							]
						},
						"description": "🔒 JWT Required: Get employee by ID"
					},
					"response": []
				},
				{
					"name": "6. Update Employee 🔒",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql('Employee details updated successfully.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"position\": \"Senior Designer\",\n  \"salary\": 95000\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/emp/employees/{{employee_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"emp",
								"employees",
								"{{employee_id}}"
							]
						},
						"description": "🔒 JWT Required: Update employee details"
					},
					"response": []
				},
				{
					"name": "7. Delete Employee 🔒",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/emp/employees?eid={{employee_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"emp",
								"employees"
							],
							"query": [
								{
									"key": "eid",
									"value": "{{employee_id}}"
								}
							]
						},
						"description": "🔒 JWT Required: Delete employee by ID"
					},
					"response": []
				},
				{
					"name": "Test - No Auth Token (401) ❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 (Unauthorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('No token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/emp/employees",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"emp",
								"employees"
							]
						},
						"description": "Test accessing protected route without JWT - should return 401"
					},
					"response": []
				}
			],
			"description": "All employee endpoints require JWT authentication 🔒"
		},
		{
			"name": "Health Check",
			"item": [
				{
					"name": "API Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API is running\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('running');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Health check - no auth required"
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "employee_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		}
	]
}